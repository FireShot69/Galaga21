#include <Windows.h>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <conio.h>
#include <exception>
#include <fstream>
using namespace std;
void move_cursor(int x, int y);
void kinder(int x, int y);
void resize_console(int vis, int shr);
void resize_console(int vis, int shr)
{
    SMALL_RECT r;
    r.Top = 0;
    r.Bottom = vis;
    r.Left = 0;
    r.Right = vis;
    SetConsoleWindowInfo(GetStdHandle(STD_OUTPUT_HANDLE), true, &r);
}
void move_cursor(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
struct bullet {
    int x;
    int y;
};
void MENU(int shr, int vis, int& inp1, int inp2) {
    cout << "Controls:\n";
    cout << "<- - left\n";
    cout << "-> - right \n";
    for (int n = 0; n < (shr / 2 - 1) - 4; n++)
    {
        cout << "\n";
    }
    cout << setw(vis / 2 + 2) << "  XXXXXX   XXXX   X        XXXX   XXXXXX   XXXX  \n";
    cout << setw(vis / 2 + 2) << "  X    X  X    X  X       X    X  X    X  X    X \n";
    cout << setw(vis / 2 + 2) << "  X       X    X  X       X    X  X       X    X \n";
    cout << setw(vis / 2 + 2) << "  X   XX  XXXXXX  X       XXXXXX  X   XX  XXXXXX \n";
    cout << setw(vis / 2 + 2) << "  X    X  X    X  X       X    X  X    X  X    X \n";
    cout << setw(vis / 2 + 2) << "  XXXXXX  X    X  XXXXXX  X    X  XXXXXX  X    X \n";
    move_cursor((vis - 29) / 2, shr - 1);
    cout << "  PRESS -ENTER- TO START\n";
    bool new_game = false;
    while ((inp1 = _getch()) != 13)
    {
        if (inp1 == 224 && (inp2 = _getch()) == 72)
        {
            new_game = true;
        }
    }
}
void RESTART(int shr, int vis, int& inp1, int inp2) {
    system("cls");
    MENU(shr, vis, inp1, inp2);
}
void WIN(bool& GAME, int shr, int vis, int& inp1, int inp2) {
    system("cls");
    int answer;
    cout << setw(50 / 2 + 2) << "\nW I N\n";
    cout << setw(50 / 2 + 2) << "\nR E S T A R T?\n";
    cout << 1 << "-NO";
    cout << setw(50 / 2 + 2) << 2 << "-YES\n";
    cin >> answer;
    if (answer == 1){
        GAME = false;
    }else if (answer == 2) {
        RESTART(shr, vis, inp1, inp2);
    }
}
void LOST(bool &GAME, int shr, int vis, int& inp1, int inp2) {
    system("cls");
    int answer;
    cout << setw(50 / 2 + 2) << "\nL O S T\n";
    cout << setw(50 / 2 + 2) << "\nR E S T A R T?\n";
    cout << 1 << "-NO";
    cout << setw(50 / 2 + 2) << 2 << "-YES\n";
    cin >> answer;
    if(answer == 1) {
        GAME = false;
    }else if (answer == 2) {
        RESTART(shr, vis, inp1, inp2);
    }
}
void STARTGAME() {
    ///////Начало игры///////////////////////////////2////////////////////////////24-25//////////////////////////////////////////////////////////////////
    bool y = 45.0;
    int x = 20;
    bool BulletsY = 45.0;
    int BulletsX = 19;
    int laserX1 = x + 4;
    int laserY1 = y;
    int MaxBullets = 10;
    bool isLaserFired = false;
    bool isEnemyAlive1 = true;
    bool isEnemyALL = true;
    int enemyY1 = 40;
    int enemyX1 = 20;
    int enemyY2 = 30;
    int enemyX2 = 30;
    int enemyY3 = 40;
    int enemyX3 = 40;
    bool isShipAlive = true;
    bool isEnemyAlive2 = false;
    bool isEnemyAlive3 = false;
    bool GAME = true;
    while (GAME)
    {
        system("cls");
        cout << string(1, '\n') << string(0, ' ') << "lY: " << laserY1 << endl;
        cout << string(3, '\n') << string(0, ' ') << "Bullets: " << MaxBullets << endl;
        if (isShipAlive) {
            cout << string(y, '\n') << string(x, ' ') << "|>-0-<|" << endl;
        }
        if (GetAsyncKeyState(VK_UP) && !isLaserFired)
        {
            laserX1 = x + 4;
            laserY1--;
            MaxBullets--;
            if (MaxBullets == 0) {
                while (MaxBullets <= 9) {
                    MaxBullets++;
                }
            }
            isLaserFired = true;
        }
        if (GetAsyncKeyState(VK_LEFT) && x != 0)
            x--;
        if (GetAsyncKeyState(VK_RIGHT) && x != 43)
            x++;
        if (isLaserFired)
        {
            cout << string(laserY1, '\n') << string(laserX1, ' ') << "^" << endl;
            laserY1++;
            enemyY1--;
            if (laserX1 >= 50) {
                isLaserFired = false;
                laserX1 = x + 4;
                laserY1 = y;
            }
        }
        if (isEnemyAlive1) {
            cout << string(enemyY1, '\n') << string(enemyX1, ' ') << "|-0-|" << endl;
        }
        if (laserY1 == 40 || laserX1 == enemyX1) {
            isEnemyAlive1 = false;
            isLaserFired = false;
            isEnemyAlive2 = true;
            laserX1 = x + 4;
            laserY1 = y;
        }
        if (isEnemyAlive2 && enemyY2 > 0) {
            cout << string(enemyY2, '\n') << string(enemyX2, ' ') << "|-0-|" << endl;
            enemyY2--;
            if (enemyY2 == y) {
                int vis = 50, shr = 45;
                int inp1 = 0, inp2 = 0;
                LOST(GAME, shr, vis, inp1, inp2);
                if (GAME) {
                    STARTGAME();
                }
                break;
            }
            if (laserY1 == enemyY2 || laserX1 == enemyX2) {
                isLaserFired = false;
                isEnemyAlive2 = false;
                laserY1 = y;
                int vis = 50, shr = 45;
                int inp1 = 0, inp2 = 0;
                WIN(GAME, shr, vis,  inp1, inp2);
                if (GAME) {
                    STARTGAME();
                }
            }
        }
    }
}
int main()
{
    int vis = 50, shr = 45;
    int inp1 = 0, inp2 = 0;
    resize_console(vis - 1, shr);
    MENU(shr, vis, inp1, inp2);
    //////Конец меню//////////////////////////////////6/////////////////////////////////////////////////////////////////////////////////////////////
    STARTGAME();
    Sleep(100);
    return 0;
}
